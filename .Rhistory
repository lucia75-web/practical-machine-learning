all$coefficients - efit$coefficients
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
install.packages("createDataPartition")
install.packages("caret")
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
load(caret)
install.packages("caret")
load(caret)
library(caret)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[-trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
View(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[-trainIndex,]
testing = adData[-trainIndex,]adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[-trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(CompressiveStrength)
View(concrete)
View(concrete)
plo√πplot()
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
subset <- split(segmentationOriginal, segmentationOriginal$Case)
set.seed(125)
modCART <- rpart(Class ~ ., data=subset$Train)
modCART
modCART <- rpart(Class ~ ., data=subset$Train)
install.packages("rpart")
install.packages("rpart")
modCART <- rpart(Class ~ ., data=subset$Train)
rpart::rpart(Class ~ ., data=subset$Train)
modCART <- rpart::rpart(Class ~ ., data=subset$Train)
testA <- segmentationOriginal[0,]
testA[1,c("TotalIntenCh2", "FiberWidthCh1", "PerimStatusCh1")] <- c(23000, 10, 2)
predict(modCART, testA, type="prob")
testB <- segmentationOriginal[0,]
testB[1,c("TotalIntenCh2", "FiberWidthCh1", "VarIntenCh4")] <- c(50000, 10, 100)
predict(modCART, testB, type="prob")
testC <- segmentationOriginal[0,]
testC[1,c("TotalIntenCh2", "FiberWidthCh1", "VarIntenCh4")] <- c(57000, 8, 100)
predict(modCART, testC, type="prob")
# d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
testD <- segmentationOriginal[0,]
testD[1,c("FiberWidthCh1", "VarIntenCh4","PerimStatusCh1")] <- c(8, 100, 2)
predict(modCART, testD, type="prob")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
set.seed(125)
modCART2 <- rpart(Area ~ ., data=olive)
modCART2
modCART2 <- rpart::rpart(Area ~ ., data=olive)
predict(modCART2, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
training$classe <- as.factor(training$classe)
v <- which(lapply(training, class) %in% "numeric")
preObj <-preProcess(training[,v],method=c('knnImpute', 'center', 'scale'))
library(caret)
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
training$classe <- as.factor(training$classe)
v <- which(lapply(training, class) %in% "numeric")
preObj <-library(caret)(training[,v],method=c('knnImpute', 'center', 'scale'))
preObj <-(training[,v],method=c('knnImpute', 'center', 'scale'))
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
training$classe <- as.factor(training$classe)
NAindex <- apply(training,2,function(x) {sum(is.na(x))})
training <- training[,which(NAindex == 0)]
NAindex <- apply(testing,2,function(x) {sum(is.na(x))})
testing <- testing[,which(NAindex == 0)]
v <- which(lapply(training, class) %in% "numeric")
preObj <-preProcess(training[,v],method=c('knnImpute', 'center', 'scale'))
train <- predict(preObj, trainin[,v])
train <- predict(preObj, training[,v])
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
training$classe <- as.factor(training$classe)
NAindex <- apply(training,2,function(x) {sum(is.na(x))})
training <- training[,which(NAindex == 0)]
NAindex <- apply(testing,2,function(x) {sum(is.na(x))})
testing <- testing[,which(NAindex == 0)]
v <- which(lapply(training, class) %in% "numeric")
preObj <-preProcess(training[,v],method=c('knnImpute', 'center', 'scale'))
train <- predict(preObj, training[,v])
train$classe <- training$classe
test <-predict(preObj,testingRaw[,v])
test <-predict(preObj,testing[,v])
nzv <- nearZeroVar(train,saveMetrics=TRUE)
train <- train[,nzv$nzv==FALSE]
nzv <- nearZeroVar(test,saveMetrics=TRUE)
test <- test[,nzv$nzv==FALSE]
set.seed(12031987)
inTrain = createDataPartition(trainLess1$classe, p = 3/4, list=FALSE)
inTrain = createDataPartition(train$classe, p = 3/4, list=FALSE)
training = train[inTrain,]
crossValidation = train[-inTrain,]
modFit <- train(classe ~., method="rf", data=training, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
install.packages("e1071")
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
setwd("~/Coursera/practical_machine_learningsupplement")
setwd("~/Coursera/practical_machine_learningsupplement")
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
training$classe <- as.factor(training$classe)
NAindex <- apply(training,2,function(x) {sum(is.na(x))})
training <- training[,which(NAindex == 0)]
NAindex <- apply(testing,2,function(x) {sum(is.na(x))})
testing <- testing[,which(NAindex == 0)]
v <- which(lapply(training, class) %in% "numeric")
newtraining <- training[, colSums(is.na(training)) == 0]
classe <- newtraining$classe
classe
classe <- newtraining$classe
?classes
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRemove <- grepl("^X|timestamp|window", names(newtraining))
trainCleaned <- trainRaw[, sapply(training, is.numeric)]
trainCleaned <- training[, sapply(training, is.numeric)]
View(trainCleaned)
View(trainCleaned)
View(newtraining)
View(newtraining)
View(newtraining)
newtraining <- training[, colSums(is.na(training)) == 0]
newtesting <- testing[, colSums(is.na(testing)) == 0]
classe <- newtraining$classe
trainnumber <- training[, sapply(newtraining, is.numeric)]
testnumber <- training[, sapply(newtesting, is.numeric)]
View(trainCleaned)
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
newtraining <- training[, colSums(is.na(training)) == 0]
newtesting <- testing[, colSums(is.na(testing)) == 0]
classe <- newtraining$classe
trainnumber <- training[, sapply(newtraining, is.numeric)]
testnumber <- training[, sapply(newtesting, is.numeric)]
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
newtraining <- training[, colSums(is.na(training)) == 0]
newtesting <- testing[, colSums(is.na(testing)) == 0]
classe <- newtraining$classe
trainnumber <- newtraining[, sapply(newtraining, is.numeric)]
testnumber <- newtesting[, sapply(newtesting, is.numeric)]
View(newtraining)
View(newtraining)
View(newtraining)
View(newtraining)
View(newtraining)
View(newtraining)
View(training)
training
View(trainnumber)
View(trainnumber)
View(trainnumber)
?createDataPartition
??createDataPartition
inTrain <- createDataPartition(train_number$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
inTrain <- createDataPartition(train_number$classe, p=0.70, list=F)
inTrain <- createDataPartition(classe, p=0.70, list=F)
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(readr)
inTrain <- createDataPartition(classe, p=0.70, list=F)
trainData <- train_number[inTrain, ]
# Read the test and  training dataset
```{r, echo = TRUE}
setwd("~/Coursera/practical_machine_learningsupplement")
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(readr)
setwd("~/Coursera/practical_machine_learningsupplement")
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(readr)
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
training_NoNA <- training[, colSums(is.na(training)) == 0]
testing_NoNA <- testing[, colSums(is.na(testing)) == 0]
classe <- training?createDataPartition?$classe
training_NoNA <- training[, colSums(is.na(training)) == 0]
testing_NoNA <- testing[, colSums(is.na(testing)) == 0]
classe <- training$classe
train_number <- training_NoNA[, sapply(training_NoNA, is.numeric)]
test_number <- testing_NoNA[, sapply(testing_NoNA, is.numeric)]
inTrain <- createDataPartition(classe, p=0.70, list=F)
trainData <- train_number[inTrain, ]
testData <- train_number[-inTrain, ]
inTrain
View(trainData)
13737+5888√π
13737+5888
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf <- train(data=trainData,classe, method="rf", trControl=trainControl())
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
training$classe
TrainClasses
classe
classe <-
classe <-
training$classe
View(iris)
classe <- training[,160]
classe
inTrain <- createDataPartition(classe, p=0.70, list=F)
train_number <- [train_number classe]
inTrain <- createDataPartition(classe, p=0.70, list=F)
train_number <- [train_number; classe]
train_number <- matrix(train_number classe)
train_number <- matrix(train_number,training$classe)
train_number <- (train_number,training$classe)
train_number <- (train_number training$classe)
train_number <- table(train_number, training$classe)
train_number <- table(train_number;training$classe)
?table
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
training_NoNA <- training[, colSums(is.na(training)) == 0]
testing_NoNA <- testing[, colSums(is.na(testing)) == 0]
classe <- training$classe
train_number <- training_NoNA[, sapply(training_NoNA, is.numeric)]
test_number <- testing_NoNA[, sapply(testing_NoNA, is.numeric)]
inTrain <- createDataPartition(classe, p=0.70, list=F)
train <- table(train_number;training$classe)
train <- table(train_number training$classe)
train <- table(train_number , training$classe)
dim(train_number)
dim(training$classe)
dim(classe)
train_number$classe <- classe
inTrain <- createDataPartition(train_number$classe, p=0.70, list=F)
trainData <- train_number[inTrain, ]
testData <- train_number[-inTrain, ]
View(trainData)
13737+5885
modelRf <- train(data=trainData,classe, method="rf", trControl=trainControl())
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=trainControl())
modelRf <- train(classe ~ ., data=trainData, method="lm", trControl=trainControl())
modelRf <- train(classe ~ ., data=trainData, method="ctree", trControl=trainControl())
modelRf
predictTree
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
training_NoNA <- training[, colSums(is.na(training)) == 0]
testing_NoNA <- testing[, colSums(is.na(testing)) == 0]
classe <- training$classe
trainData <- training_NoNA[, sapply(training_NoNA, is.numeric)]
testData <- testing_NoNA[, sapply(testing_NoNA, is.numeric)]
trainData$classe <- classe
modelTree <- train(classe ~ ., data=trainData, method="ctree", trControl=trainControl())
modelTree
predictTree <- predict(modelTree, testData)
predictTree
View(trainData)
View(trainData)
View(testData)
View(testData)
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
training_NoNA <- training[, colSums(is.na(training)) == 0]
testing_NoNA <- testing[, colSums(is.na(testing)) == 0]
classe <- training$classe
trainData <- training_NoNA[, sapply(training_NoNA, is.numeric)]
testData <- testing_NoNA[, sapply(testing_NoNA, is.numeric)]
trainData$classe <- classe
testData$classe <- classe
training <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
testing <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE,
sep=',', na.strings=c('NA','','#DIV/0!'))
dim(training)
dim(testing)
training_NoNA <- training[, colSums(is.na(training)) == 0]
testing_NoNA <- testing[, colSums(is.na(testing)) == 0]
classe <- training$classe
trainData <- training_NoNA[, sapply(training_NoNA, is.numeric)]
testData <- testing_NoNA[, sapply(testing_NoNA, is.numeric)]
trainData$classe <- classe
testData$classe <- classe
classe <- training$classe
trainingData <- training_NoNA[, sapply(training_NoNA, is.numeric)]
testingData <- testing_NoNA[, sapply(testing_NoNA, is.numeric)]
trainingData$classe <- classe
inTrain <- createDataPartition(trainingData$classe, p=0.70, list=F)
trainData <- trainingData[inTrain, ]
testData <- trainingData[-inTrain, ]
datasplitted <- createDataPartition(trainingData$classe, p=0.70, list=F)
trainData <- trainingData[datasplitted, ]
testData <- trainingData[-datasplitted, ]
13737+5885
modelTree <- train(classe ~ ., data=trainData, method="ctree", trControl=trainControl())
modelTree
predictTree <- predict(modelTree, testData)
predictTree
View(testData)
View(testData)
testData$classe
res <-cbind(classe, predictTree)
res <-table(testData$classe, predictTree)
res<-cbind(testData$classe, predictTree)
View(res)
View(res)
predictTree <- predict(modelTree, testData)
predictTree
testData$classe
geom_vline(xintercept=testData$classe, colour="blue", linetype="dashed")
require(lattice)
dotplot(predictTree)
plot(predictTree)
dim(predictTree)
size(predictTree)
dim(testing)
dim(testingData)
plot(1:dim(testingData),predictTree)
plot(1:57,predictTree)
plot((1:57),predictTree)
1:57
x = 1:57
plot(x,predictTree)
x = 1:5887
plot(x,predictTree)
plot(x,testData)
x = [,1:5887]
x <- [,1:5887]
predictTree <- predict(modelTree, testData)
predictTree
clc
plot(testData)
plot(testData)
plot(testData$classe)
?plot
?xplot
??plot
?dotplot
dotchart(testData$classe)
dotplot(testData$classe)
dotplot(1:5885,testData$classe)
dotplot(1:5885,testData$classe)
library(ggplot2)
qplot(x, y)
ggplot(data.frame(x, y), aes(x,y)) + geom_point()
x <- 1:5885
y <-testData$classe
qplot(x, y)
ggplot(data.frame(x, y), aes(x,y)) + geom_point()
ggplot(data.frame(x, testData$classe), aes(x,testData$classe)) + geom_point()
dim(testData,1)
dim(testData)[1]
ggplot(data.frame(x, predictTree), aes(x,predictTree)) + geom_point()
ggplot(data.frame(x, predictTree), aes(x,predictTree))
ggplot(data.frame(x, predictTree), aes(x,predictTree))
qplot(x, y)
qplot(x, predictTree)
?qplot
geom_point(data.frame(x, testData$classe), aes(x,testData$classe))
ggplot() +
geom_point(x, testData$classe))+
geom_point(x, predictTree)
plot( x, testData$classe, type="l", col="red" )
par(new=TRUE)
plot( x, modelTree, type="l", col="green"
)
plot( x, testData$classe, type="l", col="red" )
x = 1:dim(testData)[1]
plot( x, testData$classe, type="l", col="red" )
qplot( x, testData$classe, type="l", col="red" )
par(new=TRUE)
plot( x, modelTree, type="l", col="green" )
plot( x, modelTree, type="l", col="green" )qplot( x, testData$classe, col="red" )
par(new=TRUE)
qplot( x, modelTree, col="green" )
qplot( x, testData$classe, col="red" )
par(new=TRUE)
qplot( x, modelTree, col="green" )
qplot( x, testData$classe, col="red" )
par(new=TRUE)
qplot( x, predictTree, col="green" )
x = 1:dim(testData)[1]
df <- data.frame(x,testData$classe,predictTree)
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red") +
geom_line(aes(y=predictTree), colour="green")
x = 1:dim(testData)[1]
df <- data.frame(x,testData$classe,predictTree)
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red") +
geom_line(aes(y=predictTree), colour="green")
?geom_line
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red") +
geom_line(aes(y=predictTree), colour="green",type = "closed")
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red"msize = 6) +
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red",size = 6) +
geom_line(aes(y=predictTree), colour="green",size = 4)
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red",size = 6) +
geom_line(aes(y=predictTree), colour="green",size = 4)
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red",size = 4) +
geom_line(aes(y=predictTree), colour="green",size = 2)
ggplot(df, aes(x)) +
geom_line(aes(y=testData$classe), colour="red",size = 2) +
geom_line(aes(y=predictTree), colour="green",size = 1)
View(modelTree)
View(modelTree)
